Given an expression string exp , write a program to examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp. Constraints: 1 ≤ string size ≤ 10^5
Input
Input contains a single string containing “{“,”}”,”(“,”)”,”[“,”]”.
Output
Output Balanced or Not Balanced, based on the situation.
Example
Input:
[()]{}{[()()]()}

Output: 
Balanced

Input: 
[(])

Output: 
Not Balanced

--------------------------------------------------------------------------------------------------------------------------------
import java.util.Arrays; 
import java.util.Scanner;
  
class Main { 
  
    static char findClosing(char c) 
    { 
        if (c == '(') 
            return ')'; 
        if (c == '{') 
            return '}'; 
        if (c == '[') 
            return ']'; 
        return Character.MIN_VALUE; 
    } 
  

    static boolean check(char expr[], int n) 
    { 
        if (n == 0) 
            return true; 
        if (n == 1) 
            return false; 
        if (expr[0] == ')' || expr[0] == '}' || expr[0] == ']') 
            return false; 
  

        char closing = findClosing(expr[0]); 
        int i, count = 0; 
        for (i = 1; i < n; i++) { 
            if (expr[i] == expr[0]) 
                count++; 
            if (expr[i] == closing) { 
                if (count == 0) 
                    break; 
                count--; 
            } 
        } 

        if (i == n) 
            return false; 
  
        if (i == 1) 
            return check(Arrays.copyOfRange(expr, i + 1, n), n - 2); 
    
        return check(Arrays.copyOfRange(expr, 1, n), i - 1) && check(Arrays.copyOfRange(expr, (i + 1), n), n - i - 1); 
    } 
  
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        char[] arr = str.toCharArray();
        int n = arr.length; 
        if (check(arr, n)) 
            System.out.println("Balanced"); 
        else
            System.out.println("Not Balanced"); 
    } 
}
